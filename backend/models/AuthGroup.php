<?php

namespace backend\models;

use common\components\FSecurity;
use Yii;
use common\components\FHtml;
use common\components\FModel;
use common\models\BaseModel;
use frontend\models\ViewModel;
use yii\helpers\ArrayHelper;

/**
 * Developed by Hung Ho (Steve): ceo@mozagroup.com | hung.hoxuan@gmail.com | skype: hung.hoxuan | whatsapp: +84912738748
 * Software Outsourcing, Mobile Apps development, Website development: Make meaningful products for start-ups and entrepreneurs
 * MOZA TECH Inc: www.mozagroup.com | www.mozasolution.com | www.moza-tech.com | www.apptemplate.co | www.projectemplate.com | www.code-faster.com
 * This is the customized model class for table "auth_group".
 */
class AuthGroup extends AuthGroupBase //\yii\db\ActiveRecord
{
    const LOOKUP = [];

    const COLUMNS_UPLOAD = [];

    public $order_by = 'is_active desc,created_date desc,';

    const OBJECTS_RELATED = [];
    const OBJECTS_META = [];

    public static function getLookupArray($column) {
        if (key_exists($column, self::LOOKUP))
            return self::LOOKUP[$column];
        return [];
    }

    public $rights;
    public $users;

    public function getRights() {
        return $this->getRolesArray();
    }

    public function getRolesModels() {
        return FSecurity::getGroupRoleModels($this);
    }

    public function getUsers() {
        return $this->getMembersArray();
    }

    /**
     * Connections
     */
    public function getRoles()
    {
        return $this->hasMany(AuthPermission::className(), ['object_id' => 'id'])
            ->andOnCondition(['AND',
                ['relation_type' => 'group-role'],
                ['object2_type' => 'auth_role'],
                ['object_type' => 'auth_group']
            ]);
    }

    public function getMembers()
    {
        return $this->hasMany(AuthPermission::className(), ['object_id' => 'id'])
            ->andOnCondition(['AND',
                ['relation_type' => 'group-user'],
                ['object2_type' => 'user'],
                ['object_type' => 'auth_group']
            ]);
    }

    public function getMembersArray() {
        return ArrayHelper::getColumn($this->members, 'object2_id');
    }

    public function getRolesArray() {
        return ArrayHelper::getColumn($this->roles, 'object2_id');
    }

    /**
    * @inheritdoc
    */
    public function rules()
    {
        return [
        
            [['id', 'name', 'is_active', 'created_date', 'modified_date', 'application_id'], 'filter', 'filter' => 'trim'],
                
            [['name', 'is_active'], 'required'],
            [['is_active'], 'integer'],
            [['created_date', 'modified_date'], 'safe'],
            [['name'], 'string', 'max' => 255],
            [['application_id'], 'string', 'max' => 100],
        ];
    }

    public function prepareCustomFields() {
        parent::prepareCustomFields();
    }

    public static function getRelatedObjects() {
        return self::OBJECTS_RELATED;
    }

    public static function getMetaObjects() {
        return self::OBJECTS_META;
    }

    function afterDelete()
    {
        $tableName = self::tableName();
        AuthPermission::deleteAll("relation_type = 'group-user' AND object_id = $this->id AND object_type = '$tableName'");
        AuthPermission::deleteAll("relation_type = 'group-role' AND object_id = $this->id AND object_type = '$tableName'");

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    function afterSave($insert, $changedAttributes)
    {
        $tableName = self::tableName();

        if (key_exists('AuthGroup', $_POST)) {
            $post_data = $_POST['AuthGroup'];
            if (key_exists('users', $post_data))
                FHtml::saveAuthPermission($tableName, $this->id, 'group-user', 'user', $post_data['users']);

            if (key_exists('rights', $post_data))
                FHtml::saveAuthPermission($tableName, $this->id, 'group-role', 'auth_role', $post_data['rights']);
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
