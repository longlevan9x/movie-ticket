<?php
/**
 * Created by PhpStorm.
 * User: HY
 * Date: 1/4/2016
 * Time: 3:33 PM
 */

namespace common\widgets;

use backend\models\SettingsSchema;
use common\components\FHtml;
use common\widgets\BaseWidget;
use common\widgets\formfield\FieldEdit;
use iutbay\yii2kcfinder\KCFinderAsset;
use kartik\form\ActiveForm;
use kartik\form\ActiveFormAsset;
use yii\base\InvalidCallException;
use yii\base\Widget;
use yii\helpers\ArrayHelper;
use Yii;
use yii\helpers\BaseInflector;
use yii\helpers\Html;
use yii\helpers\Json;

class FActiveForm extends ActiveForm
{
    const TYPE_GRID = 'grid';

    public $model;
    public $object_type;
    public $moduleKey;
    public $dynamicForm;
    public $fields;
    public $display_type;
    public $edit_type;
    public $fieldClass = 'common\widgets\FActiveField';

    public function init()
    {
        $this->enableClientValidation = false;
        $this->fullSpan = 12;
        $this->staticOnly = false;
        $this->scrollToError = true;

        if ($this->display_type == self::TYPE_GRID) { //inline
            $this->formConfig = [];
            $this->type = self::TYPE_VERTICAL;
            $this->fieldConfig = ['options' => ['class'=> '', 'style' => '']];
        }

        $this->fieldClass = 'common\widgets\FActiveField';
        if (empty($this->type))
            $this->type = FHtml::config(FHtml::SETTINGS_FORM_CONTROLS_ALIGNMENT, self::TYPE_HORIZONTAL, [], 'Theme');

        if ($this->type == self::TYPE_VERTICAL) {
            $this->formConfig = [];
            //$this->fieldConfig = ['options' => ['class'=>'text-default small', 'style' => 'margin-bottom:20px;']];
        } else if ($this->type == self::TYPE_HORIZONTAL) {
            $this->formConfig = [];

            $this->formConfig = ['labelSpan' => 0];
            $this->fieldConfig = ['options' => ['class'=> '', 'style' => '']];

        } else if ($this->type == self::TYPE_INLINE) {
            $this->formConfig = [];
            $this->fieldConfig = ['options' => ['class'=> 'col-md-12', 'style' => 'padding-bottom: 10px; padding-top:10px;font-size:12px;color:grey']];
        } else { //inline
            $this->display_type = $this->type;
            $this->type = self::TYPE_HORIZONTAL;
        }

        if (FHtml::settingDynamicForm() && $this->dynamicForm) {
            if (!isset($this->object_type))
                $this->object_type = str_replace('-', '_', FHtml::currentController());

            $this->fields = FHtml::getObjectColumns($this->object_type);
        }

        $message = FHtml::showCurrentMessages();

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return boolean
     */
    public function group($label, $content = '')
    {
        FHtml::showGroupHeader($label, $content);
    }

    public function fieldNoLabel($model, $attribute, $options = [], $size = null)
    {
        $field = self::field($model, $attribute, $options, $size)->label(false);

        return $field;
    }

    public function field($model, $attribute, $options = [], $size = null)
    {
        if (!empty($this->fields)) {
            foreach ($this->fields as $field) {
                if ($field->name == $attribute) {
                    $options['column'] = $field;
                }
            }
        }

        if (isset($size))
            $options['size'] = $size;

        //2017/3/14
        if ($this->readonly === true)
            $this->edit_type = FHtml::EDIT_TYPE_VIEW;

        if (!isset($options['display_type']))
            $options['display_type'] = $this->display_type;

        if (!isset($options['edit_type']))
            $options['edit_type'] = $this->edit_type;

        return parent::field($model, $attribute, $options); // TODO: Change the autogenerated stub
    }

    public function fieldSmall($model, $attribute, $options = [], $size = null) {
        $field = self::field($model, $attribute, $options);
        $field->labelSpan(6);
        return $field;
    }

    protected function initForm()
    {
        if (!isset($this->fieldConfig['class'])) {
            $this->fieldConfig['class'] = FActiveField::className();
        }
        parent::initForm();
    }

    public function run()
    {
        if ((isset($this->dynamicForm) && $this->dynamicForm == true) && FHtml::settingDynamicForm()) { //dynamically build form base on fields info in database
            ob_end_clean();

            if (empty($this->object_type))
                $this->object_type = str_replace('-', '_', BaseInflector::camel2id(FHtml::currentController(), '_'));

            $content = $this->render('../../../backend/views/www/_form_3cols', ['model' => $this->model, 'modulePath' => $this->moduleKey, 'fields' => $this->fields]);

            echo $content;

            if ($this->enableClientScript) {
                $id = $this->options['id'];
                $options = Json::htmlEncode($this->getClientOptions());
                $attributes = Json::htmlEncode($this->attributes);
                $view = $this->getView();
                ActiveFormAsset::register($view);
                $view->registerJs("jQuery('#$id').yiiActiveForm($attributes, $options);");
            }
        } else {
            parent::run();
        }
    }
}