<?php
namespace common\controllers;

use backend\models\AuthMenu;
use backend\models\CmsMenu;
use backend\models\User;
use common\config\FSettings;
use kartik\form\ActiveForm;
use Yii;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\web\Controller;
use common\components\FHtml;
use yii\web\NotFoundHttpException;

class BaseAdminController extends Controller
{
    public $mainMenu = array();
    public $uploadFolder;
    public $currentController;
    public $currentAction;
    protected $moduleName = '';
    protected $moduleTitle = '';
    protected $moduleKey = '';
    protected $object_type = '';

    public function init()
    {
        parent::init();

        $this->view->params['toolBarActions'] = [];
        $this->view->params['uploadFolder'] = $this->uploadFolder;
        $isAjax = false;
        $this->view->params['isAjax'] = $isAjax;
        $this->view->params['displayType'] = $isAjax ? "modal-remote" : "";
        $this->view->params['editType'] = "";
        $this->view->params['buttonsType'] = (FHtml::getConfig(FHtml::SETTINGS_GRID_BUTTONS_TYPE, 'icons', ['icons', 'combos'], 'Theme', FHtml::EDITOR_SELECT) == 'icons') ? false: true;

        $isMD = FHtml::getConfig(FHtml::SETTINGS_MATERIAL_DESIGN, 'Material Design', ['Material Design', 'Bootstrap'], 'Theme', FHtml::EDITOR_SELECT) == 'Material Design' ? true : false; //material design

        if ($isMD == false) {
            $this->view->params['cssComponents'] = "components-rounded";
            $this->view->params['cssPlugins'] = "plugins";
            $this->view->params['page-md'] = "";
        } else {
            $this->view->params['cssComponents'] = "components-md";
            $this->view->params['cssPlugins'] = "plugins-md";
            $this->view->params['page-md'] = "page-md";
        }
        $this->view->params['portletStyle'] = FHtml::WIDGET_TYPE_LIGHT;

        $color = ''; //(FHtml::getConfig(FHtml::SETTINGS_PORTLET_STYLE, FHtml::WIDGET_TYPE_BOX) == FHtml::WIDGET_TYPE_BOX) ? FHtml::getConfig(FHtml::SETTINGS_MAIN_COLOR, FHtml::WIDGET_COLOR_DEFAULT) : '';

        $this->view->params['portletStyle'] = 'portlet' . ' ' . FHtml::WIDGET_TYPE_LIGHT;
        $this->view->params['mainIcon'] = ''; //FHtml::getConfig('mainIcon', '');
        $this->view->params['mainColor'] = FHtml::getConfig(FHtml::SETTINGS_ADMIN_MAIN_COLOR, FHtml::WIDGET_COLOR_DEFAULT, FHtml::ARRAY_ADMIN_THEME, 'Theme', FHtml::EDITOR_SELECT);
        $this->view->params['displayPortlet'] = false; //FHtml::getConfig(FHtml::SETTINGS_DISPLAY_PORTLET, false);
        $this->view->params['activeForm_type'] = FHtml::getConfig(FHtml::SETTINGS_FORM_CONTROLS_ALIGNMENT, ActiveForm::TYPE_HORIZONTAL, [ActiveForm::TYPE_HORIZONTAL, ActiveForm::TYPE_INLINE, ActiveForm::TYPE_VERTICAL], 'Theme', FHtml::EDITOR_SELECT);
        $this->view->params['displayPageContentHeader'] = false; //FHtml::getConfig(FHtml::SETTINGS_DISPLAY_PAGECONTENT_HEADER, false);
        //echo 13; die;
    }

    public function saveType($hiddenId = 'saveType')
    {
        return isset($_POST[$hiddenId]) ? $_POST[$hiddenId] : '';
    }

    protected function createModel($className, $id = '', $params = null)
    {
        $id = empty($id) ? FHtml::getRequestParam('id') : $id;
        $params = FHtml::merge($params, FHtml::RequestParams());

        return FHtml::getCloneModel($className, $id, $params);
    }

    /**
     * Finds the User model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return User the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = FHtml::findOne($this->object_type, $id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function render($view, $params = [])
    {
        $pr = FHtml::RequestParams(['id', 'product_id']);
        $params = ArrayHelper::merge($params, $pr);

        $view = FHtml::findView($view);
        return parent::render($view, $params); // TODO: Change the autogenerated stub
    }

    //2017/3/29
    public function redirect($url, $statusCode = 302)
    {
        if (is_string($url))
            $url = [$url];

        if ($statusCode !== false) {
            $params = FHtml::RequestParams(['id']);
        } else {
            $statusCode = 302;
        }

        if (!empty($params)) {
            foreach ($params as $key => $value) {
                if (!key_exists($key, $url))
                    $url = array_merge($url, [$key => $value]);
            }
        }

        return parent::redirect(Url::to($url), $statusCode); // TODO: Change the autogenerated stub
    }

    protected function createMenu()
    {
        $user = FHtml::currentUserIdentity();
        if (!isset($user)) {
            return;
        }

        $controller = $this->getUniqueId();
        $action = $this->action->id;
        $type = FHtml::getRequestParam('type');
        $form_type = FHtml::getRequestParam('form_type');

        $this->mainMenu = self::buildMainMenu($this->mainMenu);
    }

    public function beforeAction($action)
    {
        $user = FHtml::currentUserIdentity();
        $controller = $this->getUniqueId();

        if (isset($user)) {
            if ($controller !== 'api')
                $this->createMenu();
            $this->view->params['mainMenu'] = $this->mainMenu;
        }

        $this->uploadFolder = Yii::getAlias('@' . UPLOAD_DIR);

        return parent::beforeAction($action);
    }

    protected function buildMainMenu($mainMenu, $modules = [], $group = BACKEND)
    {
        $this->currentController = $this->getUniqueId();
        $this->currentAction = $this->action->id;

        // return in FSettings first
        $result = FSettings::backendMenu($this->currentController, $this->currentAction);
        if (!empty($result))
            return $result;

        // Otherwise, build dynamic Menu
        if (empty($modules))
            $modules = FHtml::currentAdminModules();

        $result[] = AuthMenu::buildDashBoardMenu();

        if (isset($mainMenu) && !empty($mainMenu)) {
            $result = array_merge($result, $mainMenu);
        }

        if (is_string($modules)) {
            $modules = explode(',', $modules);
        }

        foreach ($modules as $module) {
            $moduleObject = FHtml::getModuleObject($module);
            if (isset($moduleObject) && method_exists($moduleObject, 'createModuleMenu')) {
                $menu[] = $moduleObject::createModuleMenu();
            }
        }

        if (isset($menu) && !empty($menu))
            $result = array_merge($result, $menu);
        $menu = [];

        //Get from database
        $menuList = FHtml::getModels('settings_menu', ['is_active' => 1, 'group' => $group], 'sort_order', -1, 1, true);

        if (isset($menuList) && !empty($menuList) && !is_string($menuList)) {
            $result1 = [];
            $result2 = [];
            $moduleList = [];
            $this->currentController = $this->getUniqueId();
            $this->currentAction = $this->action->id;
            $controller = $this->currentController;
            $action = $this->currentAction;
            foreach ($menuList as $menuItem) {
                $module = $menuItem->module;
                if (key_exists($module, $result1)) {
                    $moduleMenu = $result1[$module];
                    $moduleController = $result2[$module];
                } else {
                    $moduleList[] = $module;
                    $moduleMenu = [];
                    $moduleController = [];
                }
                $moduleMenu[] = [
                    'label' => FHtml::t('common', $menuItem->name),
                    'name' => FHtml::t('common', $menuItem->name),
                    'route' => strpos($menuItem->url, 'http') === false ? FHtml::createUrl($menuItem->url) : $menuItem->url,
                    'active' => $controller == $menuItem->url,
                    'visible' => FHtml::isInRoles($menuItem->role),
                    'icon' => $menuItem->icon
                ];
                $moduleController[] = $menuItem->url;
                $result1[$module] = $moduleMenu;
                $result2[$module] = $moduleController;
            }

            foreach ($moduleList as $moduleItem) {
                $existed = false;
                for ($i = 0; $i < count($result); $i = $i + 1) {
                    $resultItem = $result[$i];
                    $moduleName = $resultItem['name'];
                    if (key_exists($moduleName, $result1)) {
                        $resultItem['children'] = array_merge($resultItem['children'], $result1[$moduleName]); // add to existing children
                        $result[$i] = $resultItem;
                        $existed = true;
                        break;
                    }
                }

                if (!$existed) {
                    $menuItem = [
                        'active' => in_array($controller, $result2[$moduleItem]),
                        'open' => true,
                        'visible' => true || FHtml::isInRole($moduleItem, 'active'),
                        'name' => FHtml::t('common', $moduleItem),
                        'label' => FHtml::t('common', $moduleItem),
                        'icon' => 'glyphicon glyphicon-list-alt',
                        'children' => $result1[$moduleItem]
                    ];

                    $menu[] = $menuItem;
                }
            }
        }

        if (isset($menu) && !empty($menu))
            $result = array_merge($result, $menu);

        $result[] = AuthMenu::buildAdministrationMenu();
        $result[] = AuthMenu::buildToolsMenu();

        return $result;
    }

    protected function getController()
    {
        return $this->getUniqueId();
    }
}

